@page "/"
@using Blazor.Client.Widgets
@using Blazor.Widgetised
@inject IWidgetFactory factory
@implements IDisposable

<h1>Hail to the widgetised Blazor!</h1>
A widget can be created <strong>in-line</strong> as a part of Blazor UI or dynamically built on the fly <strong>in a container</strong>.

<h3>Inline widget</h3>
<Widget VariantName="@WidgetVariants.SHOW_WIDGET" /> 

<h3>Widget containers</h3>
<div class="index-container">
    <Container Key="FIRST_WIDGET_CONTAINER">
        <i>Click on the button above to show a text widget here.</i>
    </Container>
</div>
<div class="index-container">
    <Container Key="@DELAYED_CONTAINER">
        This content will be <strong>filled in @seconds seconds</strong> with <i>RandomUpdater</i> widget.
    </Container>
</div>

<LinkToGitHub Title="Do you want to know more?" />

@functions
{
    private const string DELAYED_CONTAINER = "DELAYED_CONTAINER";

    private int seconds = 5;
    private bool isRepeatedRender;
    private bool isDisposed;

    public void Dispose()
    {
        isDisposed = true;
    }

    protected override Task OnAfterRenderAsync()
    {
        if (isRepeatedRender)
        {
            return Task.FromResult(0);
        }

        isRepeatedRender = true;

        #pragma warning disable 4014
        CountDownAsync();
        #pragma warning restore 4014
        return ExampleOfManuallyCreatedWidget();
    }

    async Task ExampleOfManuallyCreatedWidget()
    {
        await Task.Delay(5000);

        if (isDisposed)
        {
            return;
        }

        // Manual activation of widget
        WidgetInfo info = factory.Build(WidgetVariants.RANDOM_UPDATER);
        IActivatable<string> activatable = (IActivatable<string>)info.Mediator;
        activatable.Activate(DELAYED_CONTAINER);
    }

    // Update of count down in widget container
    private async Task CountDownAsync()
    {
        do
        {
            await Task.Delay(1000);

            if (isDisposed)
            {
                return;
            }

            seconds--;
            StateHasChanged();
        } while (seconds > 0);
    }
}

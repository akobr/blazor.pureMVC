@startuml architecture

interface IMessage {
    Represent a message.
    ..
    <i>Helps to distingush from other</i>
    <i>types for clean architecture.</i>
}

interface IMessageBus {
    Send<TMessage>(TMessage)
    Register<TMessage>(object, Action<TMessage>)
    Unregister<TMessage>(object)
    UnregisterAll(object)
}

interface IInteractionPipe {
    Send<TMessage>(TMessage)
    Register<TMessage>(Action<TMessage>)
}

class WidgetVariant<TCustomisation> {
    MediatorType : Type
    PresenterType : Type
    StateType : Type
    Customisation : TCustomisation
}

class WidgetDescription<TCustomisation> {
    VariantName : string
    Variant : WidgetVariant
    Position : string
    Customisation : TCustomisation
}

interface IWidgetManagementService #GreenYellow {
    Build(string) : WidgetInfo
    Build(WidgetVariant) : WidgetInfo
    Build(WidgetDescription) : WidgetInfo
    ..
    Start(string, string) : WidgetInfo
    Start(WidgetDescription) : WidgetInfo
    ..
    Activate(Guid, string)
    Deactivate(Guid)
    Destroy(Guid)
}

class WidgetMediator #CornflowerBlue {
    #IsActive : bool
    #InteractionPipe : IInteractionPipe
    #Logger : ILogger
    +Activate(string)
    +Activate(Action<RenderFragment>)
    +Deactivate()
    +Dispose()
    #GetCustomisation<TCustomisation>() : TCustomisation
    #GetState<TState>() : TState
    #GetPresenter<TPresenter>() : TPresenter
}

interface IWidgetPresenter {
    Activate(IPresenterInlineActivationContext)
    Activate(IPresenterInContainerActivationContext)
    Deactivate()
}

interface ITypedWidgetCustomisation #CornflowerBlue {
    <i>Typed customisation for a widget.</i>
}

class WidgetState #CornflowerBlue {
    <i>A POCO object as a state of a widget.</i>
}

class WidgetLayoutComponent #CornflowerBlue {
    <i>A structure of Razor components.</i>
}

class Service #CornflowerBlue {
    <i>A long-running unit of business logic.</i>
}

Service <..> IMessageBus

IWidgetManagementService .. WidgetDescription
WidgetDescription .. WidgetVariant
WidgetVariant .. ITypedWidgetCustomisation

IMessageBus <..> WidgetMediator
IMessageBus . IMessage

ITypedWidgetCustomisation <- WidgetMediator
WidgetMediator -> WidgetState
WidgetMediator --> IWidgetPresenter
IWidgetPresenter -> WidgetLayoutComponent
WidgetMediator <.. IInteractionPipe
IInteractionPipe <.. WidgetLayoutComponent

@enduml

@startuml messaging

collections components order 1
participant Mediator order 2
entity MessageBus order 3
collections services order 4

== Interactions (platform) ==

[-> components : send interaction
components -> components : bubling
components -> Mediator : receive

== Messages (logic) ==

Mediator -> MessageBus : send message
MessageBus -> services : receive

...another time...

services -> MessageBus : send message
MessageBus -> services : receive
MessageBus -> services : receive
MessageBus -> Mediator : receive

@enduml

@startuml component-widget

class Widget {
    -VariantName : string
    -Position : string
    -Description : WidgetDescription
    +SetPosition(string)
    +SetDescription(WidgetDescription)
}

@enduml

@startuml component-container

class Container {
    -Key : string
    -ChildContent : RenderFragment
    +SetKey(string)
    +SetContent(RenderFragment)
}

@enduml

@startuml component-vm-region

class ViewModelRegion {
    -ChildContent: RenderFragment
    -ViewModel: INotifyPropertyChanged
    -Filter: string
}

@enduml

@startuml component-system

class CustomComponent<TModel> {
    <i>Implement connection with</i>
    <i>interaction pipeline.</i>
    ..
    -ViewModel : TModel
    +SetViewModel(TModel)
    #RegisterChild(IComponent)
}

@enduml
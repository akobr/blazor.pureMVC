@startuml architecture-overview

interface IMessage {
    Represent a message.
    ..
    <i>Helps to distinguish from other</i>
    <i>types for a clean architecture.</i>
}

interface IMessageBus {
    Send<TMessage>(TMessage)
    Register<TMessage>(object, Action<TMessage>)
    Unregister<TMessage>(object)
    UnregisterAll(object)
}

class Service #GreenYellow {
    <i>A unit of business logic.</i>
}

class Widget #GreenYellow {
    <i>An independent and self-containing unit</i>
    <i>of UI and an orchestrator.</i>
}

Service <..> IMessageBus : send and receive
IMessageBus <..> Widget : send and receive
IMessageBus . IMessage

@enduml

@startuml architecture-services

interface IWidgetManagementService #GreenYellow {
    Build(string) : WidgetInfo
    Build(WidgetVariant) : WidgetInfo
    Build(WidgetDescription) : WidgetInfo
    ..
    Start(string, string) : WidgetInfo
    Start(WidgetDescription) : WidgetInfo
    ..
    Activate(Guid, string)
    Deactivate(Guid)
    Destroy(Guid)
}

interface IWidgetFactory {
    Build(string) : WidgetInfo
    Build(WidgetVariant) : WidgetInfo
    Register(string, WidgetVariant)
}

class WidgetVariant<TCustomisation> {
    MediatorType : Type
    PresenterType : Type
    StateType : Type
    Customisation : TCustomisation
}

class WidgetDescription<TCustomisation> {
    VariantName : string
    Variant : WidgetVariant
    Position : string
    Customisation : TCustomisation
}

IWidgetFactory <- IWidgetManagementService
IWidgetManagementService .. WidgetDescription
IWidgetFactory .. WidgetVariant
WidgetVariant <- WidgetDescription

@enduml

@startuml architecture-widget

class WidgetMediator #GreenYellow {
    #IsActive : bool
    #InteractionPipe : IInteractionPipe
    #Logger : ILogger
    +Activate(string)
    +Activate(Action<RenderFragment>)
    +Deactivate()
    +Dispose()
    #GetCustomisation<TCustomisation>() : TCustomisation
    #GetState<TState>() : TState
    #GetPresenter<TPresenter>() : TPresenter
}

interface IInteractionPipe {
    Send<TMessage>(TMessage)
    Register<TMessage>(Action<TMessage>)
}

interface IWidgetCustomisation #GreenYellow {
    <i>A customisation for a widget.</i>
}

class WidgetState #GreenYellow {
    <i>A POCO object as a state of a widget.</i>
}

class RazorComponent #GreenYellow {
    <i>A structure of Razor components.</i>
}


WidgetMediator ---> RazorComponent
IWidgetCustomisation <- WidgetMediator
WidgetMediator -> WidgetState
WidgetMediator <.. IInteractionPipe : bubble
IInteractionPipe <.. RazorComponent : bubble

@enduml

@startuml architecture-presenter

interface IWidgetPresenter {
    Activate(IPresenterInlineActivationContext)
    Activate(IPresenterInContainerActivationContext)
    Deactivate()
}

@enduml

@startuml messaging-interaction

collections components order 1
participant Mediator order 2


[-> components : send interaction
components -> components : bubling
components -> components : bubling
components -> Mediator : receive

@enduml

@startuml messaging-message

participant Mediator order 1
entity MessageBus order 2
collections services order 3

Mediator -> MessageBus : send message
MessageBus -> services : receive

...another time (broadcast)...

services -> MessageBus : send message
MessageBus -> services : receive
MessageBus -> services : receive
MessageBus -> Mediator : receive

@enduml

@startuml component-widget

class Widget {
    -VariantName : string
    -Position : string
    -Description : WidgetDescription
    +SetPosition(string)
    +SetDescription(WidgetDescription)
}

@enduml

@startuml component-container

class Container {
    -Key : string
    -ChildContent : RenderFragment
    +SetKey(string)
    +SetContent(RenderFragment)
}

@enduml

@startuml component-vm-region

class ViewModelRegion {
    -ChildContent: RenderFragment
    -ViewModel: INotifyPropertyChanged
    -Filter: string
}

@enduml

@startuml component-system

class CustomComponent<TViewModel> {
    <i>Implement connection with</i>
    <i>an interaction pipeline.</i>
    ..
    -ViewModel : TViewModel
    +SetViewModel(TViewModel)
    #RegisterChild(IComponent)
}

@enduml